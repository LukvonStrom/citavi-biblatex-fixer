% This file was created with Citavi 6.8.0.0

@article{Angelov.2012,
 author = {Angelov, Samuil and Grefen, Paul and Greefhorst, Danny},
 year = {2012},
 title = {{A framework for analysis and design of software reference architectures}},
 url = {https://www.sciencedirect.com/science/article/pii/S0950584911002333},
 keywords = {Software architecture design;Software domain architecture;Software product line architecture;Software reference architecture},
 pages = {417--431},
 pagination = {page},
 volume = {54},
 issn = {0950-5849},
 journaltitle = {{Information and Software Technology}},
 doi = {10.1016/j.infsof.2011.11.009},
 number = {4},
 abstract = {Context

A software reference architecture is a generic architecture for a class of systems that is used as a foundation for the design of concrete architectures from this class. The generic nature of reference architectures leads to a less defined architecture design and application contexts, which makes the architecture goal definition and architecture design non-trivial steps, rooted in uncertainty.

Objective

The paper presents a structured and comprehensive study on the congruence between context, goals, and design of software reference architectures. It proposes a tool for the design of congruent reference architectures and for the analysis of the level of congruence of existing reference architectures.

Method

We define a framework for congruent reference architectures. The framework is based on state of the art results from literature and practice. We validate our framework and its quality as analytical tool by applying it for the analysis of 24 reference architectures. The conclusions from our analysis are compared to the opinions of experts on these reference architectures documented in literature and dedicated communication.

Results

Our framework consists of a multi-dimensional classification space and of five types of reference architectures that are formed by combining specific values from the multi-dimensional classification space. Reference architectures that can be classified in one of these types have better chances to become a success. The validation of our framework confirms its quality as a tool for the analysis of the congruence of software reference architectures.

Conclusion

This paper facilitates software architects and scientists in the inception, design, and application of congruent software reference architectures. The application of the tool improves the chance for success of a reference architecture.}
}



